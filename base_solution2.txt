"""Module to solve part 1 of advent of code $year$-$day$"""
from enum import Enum
import os
import logging
year, day = [$year$, $day$]
root: str = os.path.join(os.getcwd(), str(year), f"day{day}")
<-TO REPLACE->
if __name__ == "__main__":
    # Import libraries
    from aocd import _impartial_submit as submit
    from urllib3 import BaseHTTPResponse

    import sys

    # Get command line arguments
    arg_list: list[str] = [x.upper() for x in sys.argv]

    # Detect logging level wanted
    LOG_LEVEL = None
    for arg in arg_list:
        if "--log" in arg.lower():
            LOG_LEVEL = arg.removeprefix("--LOG=")

    # If none specified, assume base
    if LOG_LEVEL is None:
        LOG_LEVEL = "WARNING"

    # Get logging level
    numeric_level = getattr(logging, LOG_LEVEL.upper(), None)

    # Check value is ccorrect
    if not isinstance(numeric_level, int):
        raise ValueError(f"Invalid log level: {LOG_LEVEL}")

    # Set logging config
    logging.basicConfig(format='[%(levelname)s]: %(message)s', level=numeric_level)

    # Take first two character to detect for -T
    first_two_chars: list[str] = [x[:2] for x in arg_list]

    # Check whether user has input both
    if "-T" in first_two_chars and "-R" in arg_list:
        raise ValueError("Input either -T or -R, not both")

    # Check which (if any user has input)
    TEST_ANS = None
    if "-R" in arg_list:
        # Set run type to real
        PROG_RUN_TYPE = Run.REAL

    elif "-T" in first_two_chars:
        # Test that user has put in a numeric value for the test answer
        VALID = False
        for elem in arg_list:
            if "-T" in elem and "=" in elem:
                try:
                    TEST_ANS = int(elem.split("=")[1])
                    VALID = True
                except ValueError as exc:
                    raise ValueError("Enter a numeric value for test answer") from exc

        # Raise exception if user input wrong value
        if not VALID:
            raise ValueError("Argument -T takes input -T=<test_answer>")

        # Set run type to test
        PROG_RUN_TYPE = Run.TEST
    else:
        # If user has input neither raise exception
        raise ValueError("You need to input either -T or -R")

    # Run solution
    ANSWER = main(ROOT_DIR, PROG_RUN_TYPE)

    # Test answer
    if PROG_RUN_TYPE == Run.REAL:
        r: BaseHTTPResponse | None = submit(ANSWER, year=year, day=day)
        if r is not None:
            if "That's the right answer" in str(r.data):
                print("Yippee!")

    elif PROG_RUN_TYPE == Run.TEST:
        print(f"The answer is {TEST_ANS}, you got {ANSWER}.")

        if TEST_ANS == ANSWER:
            print("You got it right! Time to submit!")
        else:
            print("Time to change ur code :(")
